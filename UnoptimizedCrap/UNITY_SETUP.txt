====================================================================
   PAXCRAFT - UNITY EDITOR SETUP GUIDE (CUBIC CHUNKS)
====================================================================

STEP 1: CREATE MATERIAL WITH TEXTURE ATLAS
--------------------------------------------------------------------
1. In Unity Project window, navigate to: Assets/Materials/
2. Right-click → Create → Material
3. Name it: "BlockAtlas"
4. In Inspector (with BlockAtlas selected):
   - Shader: Universal Render Pipeline/Lit (or "Standard" if not using URP)
   - Drag "misc/CompleteBlockAtlas.png" into the Albedo/Base Map slot
5. Select "CompleteBlockAtlas.png" texture in Project:
   - Texture Type: Default
   - Filter Mode: Point (no filter) ← IMPORTANT for pixel art!
   - Compression: None
   - Click "Apply"


STEP 2: CREATE WORLD GAMEOBJECT
--------------------------------------------------------------------
1. In Hierarchy, right-click → Create Empty
2. Name it: "World"
3. With "World" selected, in Inspector click "Add Component"
4. Type "World" and select the World script
5. Configure World component:
   - Chunk Material: Drag "BlockAtlas" material into this slot
   - Horizontal View Distance: 4
   - Vertical View Distance: 4
   - Generate On Start: ✓ (checked)
   - World Origin Chunk: X=0, Y=4, Z=0


STEP 3: SETUP CAMERA
--------------------------------------------------------------------
1. Select "Main Camera" in Hierarchy
2. Set Transform:
   - Position: X=32, Y=80, Z=32 (above terrain surface at Y=64)
   - Rotation: X=30, Y=-45, Z=0 (look down at terrain)
3. Add ChunkLoadTester script:
   - Click "Add Component" → type "ChunkLoadTester"
   - World: Drag "World" GameObject into this field
   - Move Speed: 10
   - Vertical Speed: 5
   - Enable Dynamic Loading: ✓ (checked)


STEP 4: OPTIONAL - ADD DEBUG HELPER
--------------------------------------------------------------------
1. Select "World" GameObject
2. Add Component → type "TextureDebugHelper"
3. Show Debug Info: ✓ (checked)
4. This will print chunk and texture info to Console on Start


STEP 5: PRESS PLAY!
--------------------------------------------------------------------
Press the Play button ▶️

You should see:
✓ 64 chunks generate (4x4x4 cubic volume)
✓ Terrain surface at world Y=64 with grass
✓ Stone and dirt below
✓ Air above
✓ On-screen debug info showing chunk position

Controls:
- W/A/S/D: Move horizontally
- Q/E: Move up/down
- I key: Print debug info to Console
- Chunks dynamically load/unload as you move!


====================================================================
   HOW TO ADD NEW BLOCKS AND TEXTURES
====================================================================

ADDING A NEW BLOCK TYPE:
--------------------------------------------------------------------

1. Open: Assets/Scripts/BlockType.cs
2. Add new block to enum:

   public enum BlockType : byte
   {
       Air = 0,
       Stone = 1,
       Dirt = 2,
       Grass = 3,
       Bedrock = 4,
       Wood = 5,        // ← Add new block here
       Cobblestone = 6, // ← And here
   }

3. Open: Assets/Scripts/BlockTextureData.cs
4. Add texture indices (from BlockTexture_Mapping.json):

   public const int TEX_WOOD = 621;  // oak_planks
   public const int TEX_COBBLESTONE = 206;

5. Add case to GetTextureIndex() function:

   case BlockType.Wood:
       return TEX_WOOD;
   
   case BlockType.Cobblestone:
       return TEX_COBBLESTONE;

6. Done! You can now use these blocks in terrain generation.


FINDING TEXTURE INDICES:
--------------------------------------------------------------------
Open: misc/BlockTexture_Mapping.json

Search for block name, example:
   "oak_planks": 621  ← This is the texture index

For blocks with different faces:
   "oak_log": 619     ← Side texture
   "oak_log_top": 620 ← Top/bottom texture

Use different indices for different faces like grass does:
   if (faceIndex == (int)VoxelData.Face.Top)
       return TEX_OAK_LOG_TOP;
   else
       return TEX_OAK_LOG;


MODIFYING TERRAIN GENERATION:
--------------------------------------------------------------------
Open: Assets/Scripts/Chunk.cs

Find GenerateTerrainData() function. Add your blocks:

   else if (worldY > TERRAIN_SURFACE - 10)
   {
       // Add wood layer 10 blocks below surface
       blocks[index] = BlockType.Wood;
   }

Or make specific patterns:
   if (worldY == 50 && x % 2 == 0 && z % 2 == 0)
   {
       blocks[index] = BlockType.Cobblestone; // Checkerboard at Y=50
   }


====================================================================
   TESTING YOUR FIRST CHUNK
====================================================================

Quick Test Setup:
1. Make sure World component has BlockAtlas material assigned
2. Camera is positioned at (32, 80, 32)
3. Press Play
4. You should see terrain immediately!

If Nothing Appears:
- Check Console for errors (red messages)
- Verify BlockAtlas material is assigned to World
- Check camera position is above terrain (Y > 64)
- Make sure CompleteBlockAtlas texture filter is "Point"

Expected Output in Console:
[Cubic Chunks] Generated 64 chunks in 3D volume
[Cubic Chunks] Horizontal: 4x4, Vertical: 4
[Cubic Chunks] World origin at chunk (0, 4, 0) (world Y: 64)


====================================================================
   BURST COMPILER VERIFICATION
====================================================================

1. Window → Burst → Burst Inspector
2. Click "Open Inspector"
3. Press Play in Unity
4. In Burst Inspector, search for "ChunkMeshBuilder"
5. You should see it listed with "Compiled" status
6. This confirms your mesh generation is Burst-optimized!


====================================================================
   PERFORMANCE STATS
====================================================================

With 16x16x16 cubic chunks:
- Blocks per chunk: 4,096
- With 4x4x4 view distance: 64 chunks = 262,144 blocks
- Mesh generation: ~1-5ms per chunk (Burst-compiled)
- Face culling: Only exposed faces rendered (massive savings!)
- Memory: Byte-optimized vertex data (4x less than standard)


====================================================================
   NEXT STEPS
====================================================================

1. Implement Perlin noise for realistic terrain
2. Add caves using 3D noise
3. Implement greedy meshing for fewer vertices
4. Add biomes
5. Add player controller
6. Add block breaking/placing
7. Implement lighting system
8. Add water and transparent blocks

Your system is now ready for all of these!
====================================================================

